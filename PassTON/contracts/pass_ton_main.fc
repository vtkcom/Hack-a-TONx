#include "imports/stdlib.fc";

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
	int op = in_msg_body~load_uint(1);
    
    if (op == 1) {

        ;; Datas from the user
        int walletId = in_msg_body~load_uint(256); ;; 48 byte
        int appId = in_msg_body~load_uint(16); ;; 0000 - FFFF | 2 byte
        slice data = in_msg_body~load_bits(360); ;; 45 byte
        slice pass = in_msg_body~load_bits(240); ;; 30 byte

        slice local_storage = get_data().begin_parse();
        
        cell dictionary_cell = new_dict();
        
        if (~ slice_empty?(local_storage)) {
            dictionary_cell = local_storage~load_dict();
        }

        (slice user_dictionary, int success) = dictionary_cell.udict_get?(256, walletId);
        var userDic = success == -1 ? user_dictionary~load_dict() : new_dict();

        userDic~udict_set(16, appId, begin_cell().store_slice(data).store_slice(pass).end_cell().begin_parse());
        dictionary_cell~udict_set(256, walletId, begin_cell().store_dict(userDic).end_cell().begin_parse());
        set_data(begin_cell().store_dict(dictionary_cell).end_cell());
        return ();
    }

    throw(0xffff);
}

(cell) userData(int key) method_id {
    var main_dictionary = get_data().begin_parse();
    var loaded_dict = main_dictionary~load_dict();
    (slice user_dictionary, int success) = loaded_dict.udict_get?(256, key);

    var loaded_user_dictionary = user_dictionary~load_dict();

    return (loaded_user_dictionary);
}